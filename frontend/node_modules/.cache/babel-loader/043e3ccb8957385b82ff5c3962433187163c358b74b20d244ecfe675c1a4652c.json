{"ast":null,"code":"export default class SleeperService {\n  // Function to fetch user ID from Sleeper API based on the username\n  async fetchUserId(username) {\n    try {\n      console.log(username);\n      const response = await fetch(`https://api.sleeper.app/v1/user/${username}`);\n\n      // Check if the response is successful; if not, throw an error\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Bad response from server: ${response.statusText} - ${errorText}`);\n      }\n\n      // Parse the response as JSON and return the user ID\n      const user = await response.json();\n      return user.user_id;\n    } catch (error) {\n      // If any error occurs during the process, throw an error with a descriptive message\n      throw new Error(`Error fetching user ID: ${error.message}`);\n    }\n  }\n  async getAllLeaguesForUser(userId, sport, season) {\n    try {\n      console.log(`Fetching leagues for user ID: ${userId}`);\n      const response = await fetch(`https://api.sleeper.app/v1/user/${userId}/leagues/${sport}/${season}`);\n\n      // Check if the response is successful; if not, throw an error\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Bad response from server: ${response.statusText} - ${errorText}`);\n      }\n\n      // Parse the response as JSON and log the fetched leagues\n      const leagues = await response.json();\n      console.log(`Leagues fetched successfully: ${JSON.stringify(leagues)}`);\n      return leagues;\n    } catch (error) {\n      // If any error occurs during the process, throw an error with a descriptive message\n      throw new Error(`Error fetching user ID: ${error.message}`);\n    }\n  }\n  async getRosterData(leagueId) {\n    try {\n      // get rosters for the league and week\n      const rosters = await fetch(`https://api.sleeper.app/v1/league/${leagueId}/rosters`);\n      if (!rosters.ok) {\n        throw new Error(`Error fetching rosters: ${rosters.statusText}`);\n      }\n      return await rosters.json();\n    } catch (error) {\n      throw new Error(`Error fetching rosters: ${error.message}`);\n    }\n  }\n}","map":{"version":3,"names":["SleeperService","fetchUserId","username","console","log","response","fetch","ok","errorText","text","Error","statusText","user","json","user_id","error","message","getAllLeaguesForUser","userId","sport","season","leagues","JSON","stringify","getRosterData","leagueId","rosters"],"sources":["/Users/charlpro/scoreboard/frontend/src/services/sleeper-services/sleeper.services.js"],"sourcesContent":["export default class SleeperService {\n\n    // Function to fetch user ID from Sleeper API based on the username\n    async fetchUserId(username) {\n        try {\n            console.log(username);\n            const response = await fetch(`https://api.sleeper.app/v1/user/${username}`);\n\n            // Check if the response is successful; if not, throw an error\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`Bad response from server: ${response.statusText} - ${errorText}`);\n            }\n\n            // Parse the response as JSON and return the user ID\n            const user = await response.json();\n            return user.user_id;\n        } catch (error) {\n            // If any error occurs during the process, throw an error with a descriptive message\n            throw new Error(`Error fetching user ID: ${error.message}`);\n        }\n    }\n\n    async getAllLeaguesForUser(userId, sport, season){\n        try {\n            console.log(`Fetching leagues for user ID: ${userId}`);\n            const response = await fetch(`https://api.sleeper.app/v1/user/${userId}/leagues/${sport}/${season}`);\n\n            // Check if the response is successful; if not, throw an error\n            if (!response.ok) {\n              const errorText = await response.text();\n              throw new Error(`Bad response from server: ${response.statusText} - ${errorText}`);\n            }\n        \n            // Parse the response as JSON and log the fetched leagues\n            const leagues = await response.json();\n            console.log(`Leagues fetched successfully: ${JSON.stringify(leagues)}`);\n            \n            return leagues;\n        } catch (error) {\n            // If any error occurs during the process, throw an error with a descriptive message\n            throw new Error(`Error fetching user ID: ${error.message}`);\n        }\n    }\n\n    async getRosterData(leagueId) {\n      try {\n        // get rosters for the league and week\n        const rosters = await fetch(`https://api.sleeper.app/v1/league/${leagueId}/rosters`);\n\n        if (!rosters.ok) {\n          throw new Error(`Error fetching rosters: ${rosters.statusText}`);\n        }\n\n        return await rosters.json();\n\n    } catch (error) {\n        throw new Error(`Error fetching rosters: ${error.message}`);\n      }\n    }\n}\n"],"mappings":"AAAA,eAAe,MAAMA,cAAc,CAAC;EAEhC;EACA,MAAMC,WAAWA,CAACC,QAAQ,EAAE;IACxB,IAAI;MACAC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrB,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCJ,QAAS,EAAC,CAAC;;MAE3E;MACA,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QACd,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAAE,6BAA4BL,QAAQ,CAACM,UAAW,MAAKH,SAAU,EAAC,CAAC;MACtF;;MAEA;MACA,MAAMI,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACE,OAAO;IACvB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ;MACA,MAAM,IAAIL,KAAK,CAAE,2BAA0BK,KAAK,CAACC,OAAQ,EAAC,CAAC;IAC/D;EACJ;EAEA,MAAMC,oBAAoBA,CAACC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAC;IAC7C,IAAI;MACAjB,OAAO,CAACC,GAAG,CAAE,iCAAgCc,MAAO,EAAC,CAAC;MACtD,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCY,MAAO,YAAWC,KAAM,IAAGC,MAAO,EAAC,CAAC;;MAEpG;MACA,IAAI,CAACf,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAAE,6BAA4BL,QAAQ,CAACM,UAAW,MAAKH,SAAU,EAAC,CAAC;MACpF;;MAEA;MACA,MAAMa,OAAO,GAAG,MAAMhB,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACrCV,OAAO,CAACC,GAAG,CAAE,iCAAgCkB,IAAI,CAACC,SAAS,CAACF,OAAO,CAAE,EAAC,CAAC;MAEvE,OAAOA,OAAO;IAClB,CAAC,CAAC,OAAON,KAAK,EAAE;MACZ;MACA,MAAM,IAAIL,KAAK,CAAE,2BAA0BK,KAAK,CAACC,OAAQ,EAAC,CAAC;IAC/D;EACJ;EAEA,MAAMQ,aAAaA,CAACC,QAAQ,EAAE;IAC5B,IAAI;MACF;MACA,MAAMC,OAAO,GAAG,MAAMpB,KAAK,CAAE,qCAAoCmB,QAAS,UAAS,CAAC;MAEpF,IAAI,CAACC,OAAO,CAACnB,EAAE,EAAE;QACf,MAAM,IAAIG,KAAK,CAAE,2BAA0BgB,OAAO,CAACf,UAAW,EAAC,CAAC;MAClE;MAEA,OAAO,MAAMe,OAAO,CAACb,IAAI,CAAC,CAAC;IAE/B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZ,MAAM,IAAIL,KAAK,CAAE,2BAA0BK,KAAK,CAACC,OAAQ,EAAC,CAAC;IAC7D;EACF;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}