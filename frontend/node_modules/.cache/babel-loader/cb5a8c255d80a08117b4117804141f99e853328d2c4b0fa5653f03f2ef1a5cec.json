{"ast":null,"code":"const os = require('os');\nconst path = require('path');\nconst admin = require('firebase-admin'); // Add this line to import the firebase-admin module\n\nlet serviceAccountPath;\n\n// Check the computer's hostname or any other condition\n// if (os.hostname() === 'Charless-MBP-2') {\n//     serviceAccountPath = '/Users/charlesproctor/Desktop/scoreboard/frontend/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-21a3cc81ee.json';\n// } else {\n//     serviceAccountPath = '/Users/charlpro/Downloads/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-b6377f9ec1.json';\n// }\n\nserviceAccountPath = './frontend/src/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-21a3cc81ee.json';\nconst serviceAccount = require(path.resolve(serviceAccountPath));\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: 'https://thescoreboardapp-e8534-default-rtdb.firebaseio.com' // Replace with your Firebase project URL\n});\n\n// Import the functions you need from the SDKs\nconst {\n  get,\n  getDatabase,\n  ref,\n  push,\n  set\n} = require(\"firebase/database\");\nconst {\n  initializeApp\n} = require(\"firebase/app\");\nconst fetch = require('isomorphic-fetch');\nconst readline = require('readline');\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA6f94-MMgd79UPR5TGYn3K_V8mUEZPpbw\",\n  authDomain: \"thescoreboardapp-e8534.firebaseapp.com\",\n  projectId: \"thescoreboardapp-e8534\",\n  storageBucket: \"thescoreboardapp-e8534.appspot.com\",\n  messagingSenderId: \"393453093241\",\n  appId: \"1:393453093241:web:28430c542ec9a783e4afa8\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Get a reference to the Realtime Database\nconst db = getDatabase(app);\n\n// Create an interface for reading input from the user\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n// PlayerServices class to handle player data operations\nexport default class PlayerServices {\n  // Method to fetch all NFL players from the API\n  async getAllPlayers() {\n    try {\n      const response = await fetch(`https://api.sleeper.app/v1/players/nfl`);\n      if (!response.ok) {\n        throw new Error(`Error fetching all NFL players: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error(`Error fetching all NFL players: ${error.message}`);\n    }\n  }\n\n  // Method to fetch player data by Sleeper ID (placeholder)\n  async getPlayerBySleeperId() {\n    // Implementation for fetching player by Sleeper ID\n  }\n\n  // Method to fetch and save all NFL players to Firebase, called once a day\n  async createAllSleeperPlayers() {\n    try {\n      // Fetch current NFL players data\n      const playersData = await this.getAllPlayers();\n\n      // Format today's date\n      var today = new Date();\n      const datePath = `${today.getFullYear()}_${today.getMonth() + 1}_${today.getDate()}`; // Month is 0-indexed\n\n      // Reference to save players in Firebase Realtime Database\n      const playersRef = ref(db, `AllNFLPlayers/${datePath}`);\n\n      // Save players data to Firebase, overwriting existing data\n      await set(playersRef, playersData);\n      console.log('NFL players data updated successfully.');\n    } catch (error) {\n      console.error(`Error in createAllSleeperPlayers: ${error.message}`);\n    }\n  }\n}","map":{"version":3,"names":["os","require","path","admin","serviceAccountPath","serviceAccount","resolve","initializeApp","credential","cert","databaseURL","get","getDatabase","ref","push","set","fetch","readline","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","db","rl","createInterface","input","process","stdin","output","stdout","PlayerServices","getAllPlayers","response","ok","Error","statusText","json","error","message","getPlayerBySleeperId","createAllSleeperPlayers","playersData","today","Date","datePath","getFullYear","getMonth","getDate","playersRef","console","log"],"sources":["/Users/charlpro/scoreboard/frontend/src/services/firebase-services/player.services.js"],"sourcesContent":["const os = require('os');\nconst path = require('path');\nconst admin = require('firebase-admin'); // Add this line to import the firebase-admin module\n\nlet serviceAccountPath;\n\n// Check the computer's hostname or any other condition\n// if (os.hostname() === 'Charless-MBP-2') {\n//     serviceAccountPath = '/Users/charlesproctor/Desktop/scoreboard/frontend/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-21a3cc81ee.json';\n// } else {\n//     serviceAccountPath = '/Users/charlpro/Downloads/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-b6377f9ec1.json';\n// }\n\nserviceAccountPath = './frontend/src/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-21a3cc81ee.json'\n\nconst serviceAccount = require(path.resolve(serviceAccountPath));\n\nadmin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n    databaseURL: 'https://thescoreboardapp-e8534-default-rtdb.firebaseio.com', // Replace with your Firebase project URL\n});\n\n// Import the functions you need from the SDKs\nconst { get, getDatabase, ref, push, set } = require(\"firebase/database\");\nconst { initializeApp } = require(\"firebase/app\");\nconst fetch = require('isomorphic-fetch');\nconst readline = require('readline');\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA6f94-MMgd79UPR5TGYn3K_V8mUEZPpbw\",\n    authDomain: \"thescoreboardapp-e8534.firebaseapp.com\",\n    projectId: \"thescoreboardapp-e8534\",\n    storageBucket: \"thescoreboardapp-e8534.appspot.com\",\n    messagingSenderId: \"393453093241\",\n    appId: \"1:393453093241:web:28430c542ec9a783e4afa8\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Get a reference to the Realtime Database\nconst db = getDatabase(app);\n\n// Create an interface for reading input from the user\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\n// PlayerServices class to handle player data operations\nexport default class PlayerServices {\n\n    // Method to fetch all NFL players from the API\n    async getAllPlayers() {\n        try {\n            const response = await fetch(`https://api.sleeper.app/v1/players/nfl`);\n            if (!response.ok) {\n                throw new Error(`Error fetching all NFL players: ${response.statusText}`);\n            }\n            return await response.json();\n        } catch (error) {\n            throw new Error(`Error fetching all NFL players: ${error.message}`);\n        }\n    }\n\n    // Method to fetch player data by Sleeper ID (placeholder)\n    async getPlayerBySleeperId() {\n        // Implementation for fetching player by Sleeper ID\n    }\n\n    // Method to fetch and save all NFL players to Firebase, called once a day\n    async createAllSleeperPlayers() {\n        try {\n            // Fetch current NFL players data\n            const playersData = await this.getAllPlayers();\n\n            // Format today's date\n            var today = new Date();\n            const datePath = `${today.getFullYear()}_${today.getMonth() + 1}_${today.getDate()}`; // Month is 0-indexed\n\n            // Reference to save players in Firebase Realtime Database\n            const playersRef = ref(db, `AllNFLPlayers/${datePath}`);\n\n            // Save players data to Firebase, overwriting existing data\n            await set(playersRef, playersData);\n            console.log('NFL players data updated successfully.');\n\n        } catch (error) {\n            console.error(`Error in createAllSleeperPlayers: ${error.message}`);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}