{"ast":null,"code":"var _jsxFileName = \"/Users/charlpro/scoreboard/frontend/src/FrontEndApp.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, onValue } from 'firebase/database';\nimport ScoreboardLayout from './ScoreboardLayout';\nimport './App.css';\n\n// Your web app's Firebase configuration (replace with your actual config)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"your-api-key\",\n  authDomain: \"your-auth-domain\",\n  databaseURL: \"your-database-url\",\n  projectId: \"your-project-id\",\n  storageBucket: \"your-storage-bucket\",\n  messagingSenderId: \"your-messaging-sender-id\",\n  appId: \"your-app-id\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst database = getDatabase(app);\nconst App = () => {\n  _s();\n  const [teamData, setTeamData] = useState({\n    team1Data: null,\n    team2Data: null\n  });\n  useEffect(() => {\n    // Create a reference to the data you want to fetch\n    const team1Ref = ref(database, 'path-to-team1-data');\n    const team2Ref = ref(database, 'path-to-team2-data');\n\n    // Fetch team 1 data\n    onValue(team1Ref, snapshot => {\n      setTeamData(prevData => ({\n        ...prevData,\n        team1Data: snapshot.val()\n      }));\n    });\n\n    // Fetch team 2 data\n    onValue(team2Ref, snapshot => {\n      setTeamData(prevData => ({\n        ...prevData,\n        team2Data: snapshot.val()\n      }));\n    });\n  }, []);\n\n  // Render your components with the fetched data\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ScoreboardLayout, {\n      team1Data: teamData.team1Data,\n      team2Data: teamData.team2Data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"40log4HhDn8gyvN9I9OQqdeyBkE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","initializeApp","getDatabase","ref","onValue","ScoreboardLayout","jsxDEV","_jsxDEV","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","database","App","_s","teamData","setTeamData","team1Data","team2Data","team1Ref","team2Ref","snapshot","prevData","val","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/charlpro/scoreboard/frontend/src/FrontEndApp.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, onValue } from 'firebase/database';\nimport ScoreboardLayout from './ScoreboardLayout';\nimport './App.css';\n\n// Your web app's Firebase configuration (replace with your actual config)\nconst firebaseConfig = {\n  apiKey: \"your-api-key\",\n  authDomain: \"your-auth-domain\",\n  databaseURL: \"your-database-url\",\n  projectId: \"your-project-id\",\n  storageBucket: \"your-storage-bucket\",\n  messagingSenderId: \"your-messaging-sender-id\",\n  appId: \"your-app-id\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst database = getDatabase(app);\n\nconst App = () => {\n  const [teamData, setTeamData] = useState({ team1Data: null, team2Data: null });\n\n  useEffect(() => {\n    // Create a reference to the data you want to fetch\n    const team1Ref = ref(database, 'path-to-team1-data');\n    const team2Ref = ref(database, 'path-to-team2-data');\n\n    // Fetch team 1 data\n    onValue(team1Ref, (snapshot) => {\n      setTeamData(prevData => ({ ...prevData, team1Data: snapshot.val() }));\n    });\n\n    // Fetch team 2 data\n    onValue(team2Ref, (snapshot) => {\n      setTeamData(prevData => ({ ...prevData, team2Data: snapshot.val() }));\n    });\n  }, []);\n\n  // Render your components with the fetched data\n  return (\n    <div>\n      <ScoreboardLayout team1Data={teamData.team1Data} team2Data={teamData.team2Data} />\n      {/* ... */}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,WAAW,EAAEC,GAAG,EAAEC,OAAO,QAAQ,mBAAmB;AAC7D,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,cAAc;EACtBC,UAAU,EAAE,kBAAkB;EAC9BC,WAAW,EAAE,mBAAmB;EAChCC,SAAS,EAAE,iBAAiB;EAC5BC,aAAa,EAAE,qBAAqB;EACpCC,iBAAiB,EAAE,0BAA0B;EAC7CC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGf,aAAa,CAACO,cAAc,CAAC;AACzC,MAAMS,QAAQ,GAAGf,WAAW,CAACc,GAAG,CAAC;AAEjC,MAAME,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC;IAAEsB,SAAS,EAAE,IAAI;IAAEC,SAAS,EAAE;EAAK,CAAC,CAAC;EAE9ExB,SAAS,CAAC,MAAM;IACd;IACA,MAAMyB,QAAQ,GAAGrB,GAAG,CAACc,QAAQ,EAAE,oBAAoB,CAAC;IACpD,MAAMQ,QAAQ,GAAGtB,GAAG,CAACc,QAAQ,EAAE,oBAAoB,CAAC;;IAEpD;IACAb,OAAO,CAACoB,QAAQ,EAAGE,QAAQ,IAAK;MAC9BL,WAAW,CAACM,QAAQ,KAAK;QAAE,GAAGA,QAAQ;QAAEL,SAAS,EAAEI,QAAQ,CAACE,GAAG,CAAC;MAAE,CAAC,CAAC,CAAC;IACvE,CAAC,CAAC;;IAEF;IACAxB,OAAO,CAACqB,QAAQ,EAAGC,QAAQ,IAAK;MAC9BL,WAAW,CAACM,QAAQ,KAAK;QAAE,GAAGA,QAAQ;QAAEJ,SAAS,EAAEG,QAAQ,CAACE,GAAG,CAAC;MAAE,CAAC,CAAC,CAAC;IACvE,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACErB,OAAA;IAAAsB,QAAA,eACEtB,OAAA,CAACF,gBAAgB;MAACiB,SAAS,EAAEF,QAAQ,CAACE,SAAU;MAACC,SAAS,EAAEH,QAAQ,CAACG;IAAU;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE/E,CAAC;AAEV,CAAC;AAACd,EAAA,CA1BID,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AA4BT,eAAeA,GAAG;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}