{"ast":null,"code":"var _jsxFileName = \"/Users/charlpro/scoreboard/fantasy-scoreboard/src/App.js\";\n// App.js\n\nimport React from 'react';\nimport ScoreboardLayout from './ScoreboardLayout';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  // Placeholder data - replace with actual data fetching logic\n  const team1Data = {\n    teamName: 'Team Awesome',\n    teamRecord: '5-1-0',\n    teamScore: '120.30',\n    teamLogo: 'placeholder-team1.png',\n    players: {\n      starters: [\n        // ... starter player data\n      ],\n      bench: [\n        // ... bench player data\n      ]\n    }\n  };\n  const team2Data = {\n    teamName: 'Team Fantastic',\n    teamRecord: '3-3-0',\n    teamScore: '110.15',\n    teamLogo: 'placeholder-team2.png',\n    players: {\n      starters: [\n        // ... starter player data\n      ],\n      bench: [\n        // ... bench player data\n      ]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ScoreboardLayout, {\n      team1: team1Data,\n      team2: team2Data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nconst os = require('os');\nconst path = require('path');\nconst admin = require('firebase-admin'); // Add this line to import the firebase-admin module\n\nlet serviceAccountPath;\n\n// Check the computer's hostname or any other condition\nif (os.hostname() === 'Charless-MBP-2') {\n  serviceAccountPath = '/Users/charlesproctor/Desktop/scoreboard/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-21a3cc81ee.json';\n} else {\n  serviceAccountPath = '/Users/charlpro/Downloads/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-b6377f9ec1.json';\n}\nconst serviceAccount = require(path.resolve(serviceAccountPath));\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: 'https://thescoreboardapp-e8534-default-rtdb.firebaseio.com' // Replace with your Firebase project URL\n});\n\n// Import the functions you need from the SDKs\nconst {\n  get,\n  getDatabase,\n  ref,\n  push,\n  set\n} = require(\"firebase/database\");\nconst {\n  initializeApp\n} = require(\"firebase/app\");\nconst fetch = require('isomorphic-fetch');\nconst readline = require('readline');\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA6f94-MMgd79UPR5TGYn3K_V8mUEZPpbw\",\n  authDomain: \"thescoreboardapp-e8534.firebaseapp.com\",\n  projectId: \"thescoreboardapp-e8534\",\n  storageBucket: \"thescoreboardapp-e8534.appspot.com\",\n  messagingSenderId: \"393453093241\",\n  appId: \"1:393453093241:web:28430c542ec9a783e4afa8\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Get a reference to the Realtime Database\nconst db = getDatabase(app);\n\n// Create an interface for reading input from the user\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n// Function to fetch user ID from Sleeper API based on the username\nasync function fetchUserId(username) {\n  try {\n    const response = await fetch(`https://api.sleeper.app/v1/user/${username}`);\n\n    // Check if the response is successful; if not, throw an error\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Bad response from server: ${response.statusText} - ${errorText}`);\n    }\n\n    // Parse the response as JSON and return the user ID\n    const user = await response.json();\n    return user.user_id;\n  } catch (error) {\n    // If any error occurs during the process, throw an error with a descriptive message\n    throw new Error(`Error fetching user ID: ${error.message}`);\n  }\n}\n\n// Function to fetch user leagues from Sleeper API based on the user ID\nasync function fetchUserLeagues(userId) {\n  try {\n    console.log(`Fetching leagues for user ID: ${userId}`);\n    const response = await fetch(`https://api.sleeper.app/v1/user/${userId}/leagues/nfl/2023`);\n\n    // Check if the response is successful; if not, throw an error\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Bad response from server: ${response.statusText} - ${errorText}`);\n    }\n\n    // Parse the response as JSON and log the fetched leagues\n    const leagues = await response.json();\n    console.log(`Leagues fetched successfully: ${JSON.stringify(leagues)}`);\n\n    // Save leagues to Firebase Realtime Database\n    const leaguesRef = ref(db, `users/${userId}/leagues`); // Adjust the path as needed\n    await set(leaguesRef, leagues);\n    console.log(`Leagues saved to the database.`);\n\n    // Log a message if no leagues are found\n    if (!leagues || !Array.isArray(leagues) || leagues.length === 0) {\n      console.log(`No leagues found for user ID: ${userId}`);\n      return [];\n    }\n\n    // Return the fetched leagues\n    return leagues;\n  } catch (error) {\n    // If any error occurs during the process, log an error and re-throw it\n    console.error(`Error fetching user leagues: ${error.message}`);\n    throw error;\n  }\n}\n\n// Function to fetch the current week from Sleeper API\nasync function fetchCurrentWeek() {\n  try {\n    const response = await fetch(\"https://api.sleeper.app/v1/state/nfl\");\n\n    // Check if the response is successful; if not, throw an error\n    if (!response.ok) {\n      throw new Error(`Bad response from server: ${response.statusText}`);\n    }\n\n    // Parse the response as JSON and return the current week\n    const state = await response.json();\n    return state.week;\n  } catch (error) {\n    // If any error occurs during the process, throw an error with a descriptive message\n    throw new Error(`Error fetching current week: ${error.message}`);\n  }\n}\n\n// Function to fetch matchups for a specific league and week from Sleeper API\nasync function fetchMatchups(leagueId, week) {\n  try {\n    // Fetch matchups for the league and week\n    const matchupsResponse = await fetch(`https://api.sleeper.app/v1/league/${leagueId}/matchups/${week}`);\n    if (!matchupsResponse.ok) {\n      throw new Error(`Bad response from server: ${matchupsResponse.statusText}`);\n    }\n    const matchups = await matchupsResponse.json();\n\n    // Save matchups to Firebase Realtime Database\n    const matchupsRef = ref(db, `leagues/${leagueId}/matchups/${week}`); // Adjust the path as needed\n    await set(matchupsRef, matchups);\n    console.log(`Matchups for League ${leagueId} and Week ${week} saved to the database.`);\n    return matchups;\n  } catch (error) {\n    // If any error occurs during the process, throw an error with a descriptive message\n    throw new Error(`Error fetching matchups: ${error.message}`);\n  }\n}\n\n// Function to fetch matchups for a user and week from Sleeper API\nasync function fetchUserMatchups(userLeagues, week) {\n  const userMatchups = [];\n  for (const league of userLeagues) {\n    const leagueId = league === null || league === void 0 ? void 0 : league.league_id;\n    if (leagueId) {\n      try {\n        // Fetch matchups for the user's league and week\n        const matchups = await fetchMatchups(leagueId, week);\n        userMatchups.push({\n          leagueId,\n          matchups\n        });\n        console.log(`Matchups for League ${leagueId}, Week ${week}: ${JSON.stringify(matchups)}`);\n      } catch (error) {\n        console.error(`Error fetching matchups for League ${leagueId}, Week ${week}: ${error.message}`);\n      }\n    }\n  }\n  return userMatchups; // Return the userMatchups array\n}\n\n// Function to fetch matchups for all leagues\nasync function fetchAllMatchups(userLeagues, week) {\n  for (const league of userLeagues) {\n    const leagueId = league === null || league === void 0 ? void 0 : league.league_id;\n    if (leagueId) {\n      try {\n        await fetchMatchups(leagueId, week);\n      } catch (error) {\n        console.error(`Error fetching matchups for League ${leagueId}: ${error.message}`);\n      }\n    }\n  }\n}\n\n// Function to fetch roster data\nasync function fetchRosterData(leagueId) {\n  try {\n    // Fetch rosters for the league and week\n    const rostersResponse = await fetch(`https://api.sleeper.app/v1/league/${leagueId}/rosters`);\n    if (!rostersResponse.ok) {\n      throw new Error(`Error fetching rosters: ${rostersResponse.statusText}`);\n    }\n    const rosters = await rostersResponse.json();\n\n    // Save rosters to Firebase Realtime Database\n    const rostersRef = ref(db, `leagues/${leagueId}/rosters`); // Adjust the path as needed\n    await set(rostersRef, rosters);\n    console.log(`Rosters for League ${leagueId} saved to the database.`);\n    return rosters;\n  } catch (error) {\n    throw new Error(`Error fetching rosters: ${error.message}`);\n  }\n}\n\n// Function to fetch user-specific roster information for the current week\nasync function fetchUserRosters(userLeagues, week) {\n  const userRosters = [];\n  for (const league of userLeagues) {\n    const leagueId = league === null || league === void 0 ? void 0 : league.league_id;\n    if (leagueId) {\n      try {\n        const rosters = await fetchRosterData(leagueId, week);\n        userRosters.push({\n          leagueId,\n          rosters\n        });\n        console.log(`Rosters for League ${leagueId}, Week ${week}: ${JSON.stringify(rosters)}`);\n      } catch (error) {\n        console.error(`Error fetching rosters for League ${leagueId}, Week ${week}: ${error.message}`);\n      }\n    }\n  }\n  return userRosters;\n}\n\n// Function to fetch and store transactions for a specific league and week\nasync function fetchAndStoreTransactions(leagueId, week) {\n  try {\n    // Fetch transactions for the league and week\n    const transactionsResponse = await fetch(`https://api.sleeper.app/v1/league/${leagueId}/transactions/${week}`);\n    if (!transactionsResponse.ok) {\n      throw new Error(`Bad response from server: ${transactionsResponse.statusText}`);\n    }\n    const transactions = await transactionsResponse.json();\n\n    // Check if transactions already exist in the database for the specified league and week\n    const transactionsRef = ref(db, `leagues/${leagueId}/transactions/${week}`);\n    const existingTransactions = await get(transactionsRef); // Use get on the reference directly\n\n    if (!existingTransactions.exists()) {\n      // If no existing transactions, save the fetched transactions to the database\n      await set(transactionsRef, transactions);\n      console.log(`Transactions for League ${leagueId} and Week ${week} saved to the database.`);\n    } else {\n      // If transactions already exist, update the existing data in the database\n      await set(transactionsRef, {\n        ...existingTransactions.val(),\n        ...transactions\n      });\n      console.log(`Transactions for League ${leagueId} and Week ${week} updated in the database.`);\n    }\n    return transactions;\n  } catch (error) {\n    // Improve error handling by providing more details\n    throw new Error(`Error fetching transactions for League ${leagueId} and Week ${week}: ${error.message}`);\n  }\n}\n\n// Function to fetch and store transactions for all leagues and the current week\nasync function fetchAndStoreAllTransactions(userLeagues, week) {\n  for (const league of userLeagues) {\n    const leagueId = league === null || league === void 0 ? void 0 : league.league_id;\n    if (leagueId) {\n      try {\n        await fetchAndStoreTransactions(leagueId, week);\n      } catch (error) {\n        console.error(error.message);\n        // Handle the error or log it as needed\n      }\n    }\n  }\n}\n\nasync function run() {\n  try {\n    // Prompt the user for their username\n    rl.question('Enter your Sleeper username: ', async username => {\n      // Close the interface as we have received the input\n      rl.close();\n      try {\n        const userId = await fetchUserId(username);\n        console.log(`User ID: ${userId}`);\n        const userLeagues = await fetchUserLeagues(userId);\n        console.log(`User leagues: ${JSON.stringify(userLeagues)}`);\n\n        // Assuming the first league in the array, you can modify as needed\n        const currentWeek = await fetchCurrentWeek();\n        console.log(`Current Week: ${currentWeek}`);\n\n        // Fetch matchups for all leagues and get the user matchups\n        const userMatchups = await fetchUserMatchups(userLeagues, currentWeek);\n        console.log(`User Matchups: ${JSON.stringify(userMatchups)}`);\n\n        // Fetch all matchups\n        await fetchAllMatchups(userLeagues, currentWeek);\n\n        // Fetch and store user rosters for the current week\n        await fetchUserRosters(userLeagues, currentWeek);\n\n        // Fetch and store transactions for all leagues and the current week\n        await fetchAndStoreAllTransactions(userLeagues, currentWeek);\n      } catch (error) {\n        console.error(`Error: ${error.message}`);\n      }\n    });\n  } catch (error) {\n    console.error(`Error: ${error.message}`);\n  }\n}\n\n// Run the code\nrun();\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ScoreboardLayout","jsxDEV","_jsxDEV","App","team1Data","teamName","teamRecord","teamScore","teamLogo","players","starters","bench","team2Data","className","children","team1","team2","fileName","_jsxFileName","lineNumber","columnNumber","_c","os","require","path","admin","serviceAccountPath","hostname","serviceAccount","resolve","initializeApp","credential","cert","databaseURL","get","getDatabase","ref","push","set","fetch","readline","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","db","rl","createInterface","input","process","stdin","output","stdout","fetchUserId","username","response","ok","errorText","text","Error","statusText","user","json","user_id","error","message","fetchUserLeagues","userId","console","log","leagues","JSON","stringify","leaguesRef","Array","isArray","length","fetchCurrentWeek","state","week","fetchMatchups","leagueId","matchupsResponse","matchups","matchupsRef","fetchUserMatchups","userLeagues","userMatchups","league","league_id","fetchAllMatchups","fetchRosterData","rostersResponse","rosters","rostersRef","fetchUserRosters","userRosters","fetchAndStoreTransactions","transactionsResponse","transactions","transactionsRef","existingTransactions","exists","val","fetchAndStoreAllTransactions","run","question","close","currentWeek","$RefreshReg$"],"sources":["/Users/charlpro/scoreboard/fantasy-scoreboard/src/App.js"],"sourcesContent":["// App.js\n\nimport React from 'react';\nimport ScoreboardLayout from './ScoreboardLayout';\nimport './App.css';\n\nconst App = () => {\n  // Placeholder data - replace with actual data fetching logic\n  const team1Data = {\n    teamName: 'Team Awesome',\n    teamRecord: '5-1-0',\n    teamScore: '120.30',\n    teamLogo: 'placeholder-team1.png',\n    players: {\n      starters: [\n        // ... starter player data\n      ],\n      bench: [\n        // ... bench player data\n      ]\n    }\n  };\n\n  const team2Data = {\n    teamName: 'Team Fantastic',\n    teamRecord: '3-3-0',\n    teamScore: '110.15',\n    teamLogo: 'placeholder-team2.png',\n    players: {\n      starters: [\n        // ... starter player data\n      ],\n      bench: [\n        // ... bench player data\n      ]\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <ScoreboardLayout team1={team1Data} team2={team2Data} />\n    </div>\n  );\n};\n\nexport default App;\n\n\nconst os = require('os');\nconst path = require('path');\nconst admin = require('firebase-admin'); // Add this line to import the firebase-admin module\n\nlet serviceAccountPath;\n\n// Check the computer's hostname or any other condition\nif (os.hostname() === 'Charless-MBP-2') {\n  serviceAccountPath = '/Users/charlesproctor/Desktop/scoreboard/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-21a3cc81ee.json';\n} else {\n  serviceAccountPath = '/Users/charlpro/Downloads/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-b6377f9ec1.json';\n}\n\nconst serviceAccount = require(path.resolve(serviceAccountPath));\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: 'https://thescoreboardapp-e8534-default-rtdb.firebaseio.com', // Replace with your Firebase project URL\n});\n\n// Import the functions you need from the SDKs\nconst { get, getDatabase, ref, push, set } = require(\"firebase/database\");\nconst { initializeApp } = require(\"firebase/app\");\nconst fetch = require('isomorphic-fetch');\nconst readline = require('readline');\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA6f94-MMgd79UPR5TGYn3K_V8mUEZPpbw\",\n  authDomain: \"thescoreboardapp-e8534.firebaseapp.com\",\n  projectId: \"thescoreboardapp-e8534\",\n  storageBucket: \"thescoreboardapp-e8534.appspot.com\",\n  messagingSenderId: \"393453093241\",\n  appId: \"1:393453093241:web:28430c542ec9a783e4afa8\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Get a reference to the Realtime Database\nconst db = getDatabase(app);\n\n// Create an interface for reading input from the user\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n\n// Function to fetch user ID from Sleeper API based on the username\nasync function fetchUserId(username) {\n  try {\n    const response = await fetch(`https://api.sleeper.app/v1/user/${username}`);\n    \n    // Check if the response is successful; if not, throw an error\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Bad response from server: ${response.statusText} - ${errorText}`);\n    }\n\n    // Parse the response as JSON and return the user ID\n    const user = await response.json();\n    return user.user_id;\n  } catch (error) {\n    // If any error occurs during the process, throw an error with a descriptive message\n    throw new Error(`Error fetching user ID: ${error.message}`);\n  }\n}\n\n\n// Function to fetch user leagues from Sleeper API based on the user ID\nasync function fetchUserLeagues(userId) {\n  try {\n    console.log(`Fetching leagues for user ID: ${userId}`);\n    const response = await fetch(`https://api.sleeper.app/v1/user/${userId}/leagues/nfl/2023`);\n\n    // Check if the response is successful; if not, throw an error\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Bad response from server: ${response.statusText} - ${errorText}`);\n    }\n\n    // Parse the response as JSON and log the fetched leagues\n    const leagues = await response.json();\n    console.log(`Leagues fetched successfully: ${JSON.stringify(leagues)}`);\n\n    // Save leagues to Firebase Realtime Database\n    const leaguesRef = ref(db, `users/${userId}/leagues`); // Adjust the path as needed\n    await set(leaguesRef, leagues);\n\n    console.log(`Leagues saved to the database.`);\n\n    // Log a message if no leagues are found\n    if (!leagues || !Array.isArray(leagues) || leagues.length === 0) {\n      console.log(`No leagues found for user ID: ${userId}`);\n      return [];\n    }\n\n    // Return the fetched leagues\n    return leagues;\n  } catch (error) {\n    // If any error occurs during the process, log an error and re-throw it\n    console.error(`Error fetching user leagues: ${error.message}`);\n    throw error;\n  }\n}\n\n\n// Function to fetch the current week from Sleeper API\nasync function fetchCurrentWeek() {\n  try {\n    const response = await fetch(\"https://api.sleeper.app/v1/state/nfl\");\n    \n    // Check if the response is successful; if not, throw an error\n    if (!response.ok) {\n      throw new Error(`Bad response from server: ${response.statusText}`);\n    }\n\n    // Parse the response as JSON and return the current week\n    const state = await response.json();\n    return state.week;\n  } catch (error) {\n    // If any error occurs during the process, throw an error with a descriptive message\n    throw new Error(`Error fetching current week: ${error.message}`);\n  }\n}\n\n\n// Function to fetch matchups for a specific league and week from Sleeper API\nasync function fetchMatchups(leagueId, week) {\n  try {\n    // Fetch matchups for the league and week\n    const matchupsResponse = await fetch(`https://api.sleeper.app/v1/league/${leagueId}/matchups/${week}`);\n    if (!matchupsResponse.ok) {\n      throw new Error(`Bad response from server: ${matchupsResponse.statusText}`);\n    }\n    const matchups = await matchupsResponse.json();\n\n    // Save matchups to Firebase Realtime Database\n    const matchupsRef = ref(db, `leagues/${leagueId}/matchups/${week}`); // Adjust the path as needed\n    await set(matchupsRef, matchups);\n\n    console.log(`Matchups for League ${leagueId} and Week ${week} saved to the database.`);\n\n    return matchups;\n  } catch (error) {\n    // If any error occurs during the process, throw an error with a descriptive message\n    throw new Error(`Error fetching matchups: ${error.message}`);\n  }\n}\n\n\n// Function to fetch matchups for a user and week from Sleeper API\nasync function fetchUserMatchups(userLeagues, week) {\n  const userMatchups = [];\n\n  for (const league of userLeagues) {\n    const leagueId = league?.league_id;\n\n    if (leagueId) {\n      try {\n        // Fetch matchups for the user's league and week\n        const matchups = await fetchMatchups(leagueId, week);\n        userMatchups.push({ leagueId, matchups });\n        console.log(`Matchups for League ${leagueId}, Week ${week}: ${JSON.stringify(matchups)}`);\n      } catch (error) {\n        console.error(`Error fetching matchups for League ${leagueId}, Week ${week}: ${error.message}`);\n      }\n    }\n  }\n\n  return userMatchups; // Return the userMatchups array\n}\n\n// Function to fetch matchups for all leagues\nasync function fetchAllMatchups(userLeagues, week) {\n  for (const league of userLeagues) {\n    const leagueId = league?.league_id;\n\n    if (leagueId) {\n      try {\n        await fetchMatchups(leagueId, week);\n      } catch (error) {\n        console.error(`Error fetching matchups for League ${leagueId}: ${error.message}`);\n      }\n    }\n  }\n}\n\n\n// Function to fetch roster data\nasync function fetchRosterData(leagueId) {\n  try {\n    // Fetch rosters for the league and week\n    const rostersResponse = await fetch(`https://api.sleeper.app/v1/league/${leagueId}/rosters`);\n    if (!rostersResponse.ok) {\n      throw new Error(`Error fetching rosters: ${rostersResponse.statusText}`);\n    }\n    const rosters = await rostersResponse.json();\n\n    // Save rosters to Firebase Realtime Database\n    const rostersRef = ref(db, `leagues/${leagueId}/rosters`); // Adjust the path as needed\n    await set(rostersRef, rosters);\n\n    console.log(`Rosters for League ${leagueId} saved to the database.`);\n\n    return rosters;\n  } catch (error) {\n    throw new Error(`Error fetching rosters: ${error.message}`);\n  }\n}\n\n\n// Function to fetch user-specific roster information for the current week\nasync function fetchUserRosters(userLeagues, week) {\n  const userRosters = [];\n\n  for (const league of userLeagues) {\n    const leagueId = league?.league_id;\n\n    if (leagueId) {\n      try {\n        const rosters = await fetchRosterData(leagueId, week);\n        userRosters.push({ leagueId, rosters });\n        console.log(`Rosters for League ${leagueId}, Week ${week}: ${JSON.stringify(rosters)}`);\n      } catch (error) {\n        console.error(`Error fetching rosters for League ${leagueId}, Week ${week}: ${error.message}`);\n      }\n    }\n  }\n\n  return userRosters;\n}\n\n\n// Function to fetch and store transactions for a specific league and week\nasync function fetchAndStoreTransactions(leagueId, week) {\n  try {\n    // Fetch transactions for the league and week\n    const transactionsResponse = await fetch(`https://api.sleeper.app/v1/league/${leagueId}/transactions/${week}`);\n    \n    if (!transactionsResponse.ok) {\n      throw new Error(`Bad response from server: ${transactionsResponse.statusText}`);\n    }\n\n    const transactions = await transactionsResponse.json();\n\n    // Check if transactions already exist in the database for the specified league and week\n    const transactionsRef = ref(db, `leagues/${leagueId}/transactions/${week}`);\n    const existingTransactions = await get(transactionsRef); // Use get on the reference directly\n\n    if (!existingTransactions.exists()) {\n      // If no existing transactions, save the fetched transactions to the database\n      await set(transactionsRef, transactions);\n      console.log(`Transactions for League ${leagueId} and Week ${week} saved to the database.`);\n    } else {\n      // If transactions already exist, update the existing data in the database\n      await set(transactionsRef, { ...existingTransactions.val(), ...transactions });\n      console.log(`Transactions for League ${leagueId} and Week ${week} updated in the database.`);\n    }\n\n    return transactions;\n  } catch (error) {\n    // Improve error handling by providing more details\n    throw new Error(`Error fetching transactions for League ${leagueId} and Week ${week}: ${error.message}`);\n  }\n}\n\n\n// Function to fetch and store transactions for all leagues and the current week\nasync function fetchAndStoreAllTransactions(userLeagues, week) {\n  for (const league of userLeagues) {\n    const leagueId = league?.league_id;\n\n    if (leagueId) {\n      try {\n        await fetchAndStoreTransactions(leagueId, week);\n      } catch (error) {\n        console.error(error.message);\n        // Handle the error or log it as needed\n      }\n    }\n  }\n}\n\n\n\nasync function run() {\n  try {\n    // Prompt the user for their username\n    rl.question('Enter your Sleeper username: ', async (username) => {\n      // Close the interface as we have received the input\n      rl.close();\n\n      try {\n        const userId = await fetchUserId(username);\n        console.log(`User ID: ${userId}`);\n\n        const userLeagues = await fetchUserLeagues(userId);\n        console.log(`User leagues: ${JSON.stringify(userLeagues)}`);\n\n        // Assuming the first league in the array, you can modify as needed\n        const currentWeek = await fetchCurrentWeek();\n        console.log(`Current Week: ${currentWeek}`);\n\n        // Fetch matchups for all leagues and get the user matchups\n        const userMatchups = await fetchUserMatchups(userLeagues, currentWeek);\n        console.log(`User Matchups: ${JSON.stringify(userMatchups)}`);\n\n        // Fetch all matchups\n        await fetchAllMatchups(userLeagues, currentWeek);\n\n        // Fetch and store user rosters for the current week\n        await fetchUserRosters(userLeagues, currentWeek);\n\n        // Fetch and store transactions for all leagues and the current week\n        await fetchAndStoreAllTransactions(userLeagues, currentWeek);\n        \n      } catch (error) {\n        console.error(`Error: ${error.message}`);\n      }\n    });\n  } catch (error) {\n    console.error(`Error: ${error.message}`);\n  }\n}\n\n// Run the code\nrun();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}