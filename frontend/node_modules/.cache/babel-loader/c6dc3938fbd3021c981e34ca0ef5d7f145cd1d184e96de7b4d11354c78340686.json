{"ast":null,"code":"const os = require('os');\nconst path = require('path');\nconst admin = require('firebase-admin'); // Add this line to import the firebase-admin module\n\nlet serviceAccountPath;\n\n// Check the computer's hostname or any other condition\nif (os.hostname() === 'Charless-MBP-2') {\n  serviceAccountPath = '/Users/charlesproctor/Desktop/scoreboard/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-21a3cc81ee.json';\n} else {\n  serviceAccountPath = '/Users/charlpro/Downloads/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-b6377f9ec1.json';\n}\nconst serviceAccount = require(path.resolve(serviceAccountPath));\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: 'https://thescoreboardapp-e8534-default-rtdb.firebaseio.com' // Replace with your Firebase project URL\n});\n\n// Import the functions you need from the SDKs\nconst {\n  get,\n  getDatabase,\n  ref,\n  push,\n  set\n} = require(\"firebase/database\");\nconst {\n  initializeApp\n} = require(\"firebase/app\");\nconst fetch = require('isomorphic-fetch');\nconst readline = require('readline');\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA6f94-MMgd79UPR5TGYn3K_V8mUEZPpbw\",\n  authDomain: \"thescoreboardapp-e8534.firebaseapp.com\",\n  projectId: \"thescoreboardapp-e8534\",\n  storageBucket: \"thescoreboardapp-e8534.appspot.com\",\n  messagingSenderId: \"393453093241\",\n  appId: \"1:393453093241:web:28430c542ec9a783e4afa8\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Get a reference to the Realtime Database\nconst db = getDatabase(app);\n\n// Create an interface for reading input from the user\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nexport default class PlayerServices {\n  async getAllPlayers() {\n    try {\n      // get players in the NFL should be done once a day\n      const rosters = await fetch(`https://api.sleeper.app/v1/players/nfl`);\n      if (!rosters.ok) {\n        throw new Error(`Error fetching all NFL players: ${rosters.statusText}`);\n      }\n      return await rosters.json();\n    } catch (error) {\n      throw new Error(`Error fetching rosters: ${error.message}`);\n    }\n  }\n}","map":{"version":3,"names":["os","require","path","admin","serviceAccountPath","hostname","serviceAccount","resolve","initializeApp","credential","cert","databaseURL","get","getDatabase","ref","push","set","fetch","readline","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","db","rl","createInterface","input","process","stdin","output","stdout","PlayerServices","getAllPlayers","rosters","ok","Error","statusText","json","error","message"],"sources":["/Users/charlpro/scoreboard/frontend/src/services/firebase-services/player.services.js"],"sourcesContent":["const os = require('os');\nconst path = require('path');\nconst admin = require('firebase-admin'); // Add this line to import the firebase-admin module\n\nlet serviceAccountPath;\n\n// Check the computer's hostname or any other condition\nif (os.hostname() === 'Charless-MBP-2') {\n  serviceAccountPath = '/Users/charlesproctor/Desktop/scoreboard/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-21a3cc81ee.json';\n} else {\n  serviceAccountPath = '/Users/charlpro/Downloads/thescoreboardapp-e8534-firebase-adminsdk-3xxuw-b6377f9ec1.json';\n}\n\nconst serviceAccount = require(path.resolve(serviceAccountPath));\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: 'https://thescoreboardapp-e8534-default-rtdb.firebaseio.com', // Replace with your Firebase project URL\n});\n\n// Import the functions you need from the SDKs\nconst { get, getDatabase, ref, push, set } = require(\"firebase/database\");\nconst { initializeApp } = require(\"firebase/app\");\nconst fetch = require('isomorphic-fetch');\nconst readline = require('readline');\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA6f94-MMgd79UPR5TGYn3K_V8mUEZPpbw\",\n  authDomain: \"thescoreboardapp-e8534.firebaseapp.com\",\n  projectId: \"thescoreboardapp-e8534\",\n  storageBucket: \"thescoreboardapp-e8534.appspot.com\",\n  messagingSenderId: \"393453093241\",\n  appId: \"1:393453093241:web:28430c542ec9a783e4afa8\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Get a reference to the Realtime Database\nconst db = getDatabase(app);\n\n// Create an interface for reading input from the user\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nexport default class PlayerServices{\n\n   async getAllPlayers() {\n      try {\n        // get players in the NFL should be done once a day\n        const rosters = await fetch(`https://api.sleeper.app/v1/players/nfl`);\n\n        if (!rosters.ok) {\n            throw new Error(`Error fetching all NFL players: ${rosters.statusText}`);\n            }\n    \n        return await rosters.json();\n    \n    }       catch (error) {\n            throw new Error(`Error fetching rosters: ${error.message}`);\n      }\n        }\n}          \n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,KAAK,GAAGF,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;;AAEzC,IAAIG,kBAAkB;;AAEtB;AACA,IAAIJ,EAAE,CAACK,QAAQ,CAAC,CAAC,KAAK,gBAAgB,EAAE;EACtCD,kBAAkB,GAAG,yGAAyG;AAChI,CAAC,MAAM;EACLA,kBAAkB,GAAG,0FAA0F;AACjH;AAEA,MAAME,cAAc,GAAGL,OAAO,CAACC,IAAI,CAACK,OAAO,CAACH,kBAAkB,CAAC,CAAC;AAEhED,KAAK,CAACK,aAAa,CAAC;EAClBC,UAAU,EAAEN,KAAK,CAACM,UAAU,CAACC,IAAI,CAACJ,cAAc,CAAC;EACjDK,WAAW,EAAE,4DAA4D,CAAE;AAC7E,CAAC,CAAC;;AAEF;AACA,MAAM;EAAEC,GAAG;EAAEC,WAAW;EAAEC,GAAG;EAAEC,IAAI;EAAEC;AAAI,CAAC,GAAGf,OAAO,CAAC,mBAAmB,CAAC;AACzE,MAAM;EAAEO;AAAc,CAAC,GAAGP,OAAO,CAAC,cAAc,CAAC;AACjD,MAAMgB,KAAK,GAAGhB,OAAO,CAAC,kBAAkB,CAAC;AACzC,MAAMiB,QAAQ,GAAGjB,OAAO,CAAC,UAAU,CAAC;;AAEpC;AACA,MAAMkB,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,oCAAoC;EACnDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGlB,aAAa,CAACW,cAAc,CAAC;;AAEzC;AACA,MAAMQ,EAAE,GAAGd,WAAW,CAACa,GAAG,CAAC;;AAE3B;AACA,MAAME,EAAE,GAAGV,QAAQ,CAACW,eAAe,CAAC;EAClCC,KAAK,EAAEC,OAAO,CAACC,KAAK;EACpBC,MAAM,EAAEF,OAAO,CAACG;AAClB,CAAC,CAAC;AAEF,eAAe,MAAMC,cAAc;EAEhC,MAAMC,aAAaA,CAAA,EAAG;IACnB,IAAI;MACF;MACA,MAAMC,OAAO,GAAG,MAAMpB,KAAK,CAAE,wCAAuC,CAAC;MAErE,IAAI,CAACoB,OAAO,CAACC,EAAE,EAAE;QACb,MAAM,IAAIC,KAAK,CAAE,mCAAkCF,OAAO,CAACG,UAAW,EAAC,CAAC;MACxE;MAEJ,OAAO,MAAMH,OAAO,CAACI,IAAI,CAAC,CAAC;IAE/B,CAAC,CAAO,OAAOC,KAAK,EAAE;MACd,MAAM,IAAIH,KAAK,CAAE,2BAA0BG,KAAK,CAACC,OAAQ,EAAC,CAAC;IACjE;EACE;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}